// in multi-gemini-proxy/api/queue-consumer.js

const { GoogleGenAI } = require('@google/genai');
const fetch = require('node-fetch');
// ÂØºÂÖ•ÂÜÖÈÉ®APIÂáΩÊï∞
const feishuOperations = require('./feishu-operations.js');

module.exports = async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed. Please use POST.' });
  }

  const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
  if (!GEMINI_API_KEY) {
    console.error('GEMINI_API_KEY is not configured.');
    return res.status(500).json({ error: 'GEMINI_API_KEY is not configured.' });
  }

  try {
    const { messages } = req.body;

    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      console.log('Received queue request with no messages.');
      return res.status(200).json({ success: true, message: 'No messages to process.' });
    }

    // Process only the first message in the batch to control rate
    const message = messages[0];
    console.log(`Processing message ID: ${message.id}`);

    const { feishuRecordId, commercialData, creatorHandle, env, accessToken } = message.body;

    if (!feishuRecordId || !commercialData || !creatorHandle || !env || !accessToken) {
      console.error('Message body is missing required parameters.', message.body);
      // Acknowledge the message to prevent retries for malformed data
      return res.status(200).json({ error: 'Bad Request. Message body missing required parameters.' });
    }
    
    console.log(`Starting analysis for Feishu Record ID: ${feishuRecordId}`);

    // 1. Ëé∑ÂèñTikTokÊï∞ÊçÆ
    console.log('Step 1: Fetching TikTok data...');
    const { allVideos, topVideos } = await getTiktokData(creatorHandle);
    
    console.log('=== TikTokÊï∞ÊçÆËé∑ÂèñÁªìÊûú ===');
    console.log(`üìä Ëé∑ÂèñÂà∞ÁöÑËßÜÈ¢ëÊÄªÊï∞: ${allVideos.length} Êù°`);
    console.log(`üéØ Áî®‰∫éËßÜÈ¢ëÂàÜÊûêÁöÑTopËßÜÈ¢ëÊï∞: ${topVideos.length} Êù°`);
    console.log('==========================');
    
    if (allVideos.length === 0) {
      console.log(`No public TikTok videos found for ${creatorHandle}.`);
    }

    const ai = new GoogleGenAI(GEMINI_API_KEY);
    
    // 2. ËøõË°åAIÂàÜÊûê
    console.log('Step 2: Starting AI analysis...');
    const { reportMarkdown, reviewOpinion } = await performAiAnalysis(ai, commercialData, allVideos, topVideos);

    // 3. Áõ¥Êé•Êõ¥Êñ∞È£û‰π¶Ë°®Ê†º
    console.log('Step 3: Updating Feishu table with Gemini analysis content...');
    await performCompleteFeishuOperations(feishuRecordId, reviewOpinion, reportMarkdown, creatorHandle, env, accessToken, commercialData);

    console.log('All operations completed successfully');
    return res.status(200).json({ success: true, message: 'All operations completed' });

  } catch (error) {
    console.error("Error in Vercel Gemini Orchestrator:", error.stack);
    return res.status(500).json({ error: 'Internal Server Error', details: error.message });
  }
}

/**
 * ÊâßË°åAIÂàÜÊûê (ÈáçÊûÑÂêé‰ΩøÁî®ÂÜÖËÅîÊï∞ÊçÆ)
 */
async function performAiAnalysis(ai, commercialData, allVideos, topVideos) {
  const prompt = `
    ‰Ω†ÊòØ‰∏Ä‰ΩçÈ°∂Á∫ßÁöÑÁü≠ËßÜÈ¢ëÂÜÖÂÆπÂàÜÊûê‰∏éÂïÜ‰∏öÂêà‰ΩúÁ≠ñÁï•‰∏ìÂÆ∂„ÄÇ‰Ω†ÁöÑ‰ªªÂä°ÊòØÂü∫‰∫é‰ª•‰∏ã‰ø°ÊÅØÔºåÊ∑±Â∫¶ÂàÜÊûê‰∏Ä‰ΩçTikTokÂàõ‰ΩúËÄÖÁöÑÂàõ‰ΩúÈ£éÊ†º„ÄÅÊìÖÈïøÊñπÂêë„ÄÅÂàõ‰ΩúËÉΩÂäõÂíåÂïÜ‰∏öÂåñÊΩúÂäõÔºö
    1.  **ÂïÜ‰∏öÂêà‰ΩúÊï∞ÊçÆ**ÔºöÊù•Ëá™ÂìÅÁâåÊñπÁöÑË°®Ê†ºÔºåÂåÖÂê´Á≤â‰∏ùÊï∞„ÄÅÂéÜÂè≤ÈîÄÂîÆÈ¢ùÁ≠â„ÄÇËøô‰∫õÊï∞ÊçÆÊòØÂàõ‰ΩúËÄÖÂú®Âπ≥Âè∞‰∏äÁöÑÊï¥‰ΩìË°®Áé∞ÔºåÂπ∂ÈùûÊòØÂíåÊàë‰ª¨ÂìÅÁâåÂêà‰ΩúÁöÑÂéÜÂè≤Êï∞ÊçÆ„ÄÇÂÖ∂‰∏≠GMVÊòØÂàõ‰ΩúËÄÖÂú®Âπ≥Âè∞‰∏äÁöÑÊï¥‰ΩìÈîÄÂîÆÈ¢ùÔºåÂπ∂ÈùûËé∑ÂæóÁöÑÊï¥‰Ωì‰Ω£Èáë„ÄÇËÄåÂïÜ‰∏öÊï∞ÊçÆ‰∏≠ÁöÑ‰Ω£ÈáëÔºåÊòØÊåáÊàë‰ª¨‰∏∫Ê≠§‰∫ßÂìÅËÆæÁΩÆÁöÑÂÖ¨ÂºÄÂàõ‰Ωú‰Ω£ÈáëÔºåÂπ∂ÈùûÂ§™Â§öÂÆûÈôÖÂê´‰πâÔºåÂè¶Â§ñÈ¢ÑËÆ°ÂèëÂ∏ÉÁéáÔºåÊòØÊåáÂàõ‰ΩúËÄÖËøáÂéª30Â§©Âú®‰∏éÂìÅÁâåÂêà‰ΩúËøáÁ®ã‰∏≠ÁöÑÂ±•Á∫¶ÊåáÊ†áÔºå91%‰ª£Ë°®100‰∏™Âêà‰Ωú‰∏≠‰ºöÂ±•Á∫¶91‰∏™„ÄÇ
    2.  **Ëøë100Êù°ËßÜÈ¢ëÁöÑÂÆåÊï¥ÁªüËÆ°Êï∞ÊçÆ**ÔºöÂåÖÂê´ÊâÄÊúâËßÜÈ¢ëÁöÑÊèèËø∞„ÄÅÊí≠Êîæ„ÄÅÁÇπËµû„ÄÅËØÑËÆ∫Á≠âÁªüËÆ°Êï∞ÊçÆ„ÄÇ
    3.  **Êí≠ÊîæÈáèÊúÄÈ´òÁöÑ3‰∏™ËßÜÈ¢ëÁöÑÂÆûÈôÖÊñá‰ª∂**ÔºöÊàëÂ∑≤Â∞ÜËßÜÈ¢ëÊñá‰ª∂‰Ωú‰∏∫ËæìÂÖ•Êèê‰æõÁªô‰Ω†Ôºå‰Ω†ÂèØ‰ª•Áõ¥Êé•"ËßÇÁúã"Âπ∂ÂàÜÊûêÂÖ∂ÂÜÖÂÆπ„ÄÇ
    4.  **ËØ∑‰Ω†Â∞ÜÂàÜÊûêÁöÑÈáçÁÇπÊîæÂú®Êèê‰æõÁªô‰Ω†ÁöÑËßÜÈ¢ëÁöÑÁªüËÆ°Êï∞ÊçÆ‰∏ä**ÔºöËøôÂèçÊò†‰∫ÜÂàõ‰ΩúËÄÖÁöÑÂàõ‰ΩúÁöÑÂÜÖÂÆπÂèóÂπ≥Âè∞ÊàñËÄÖÊ∂àË¥πËÄÖÂñúÁà±ÁöÑÁ®ãÂ∫¶Ôºö
    5.  **Ëøë‰∏âÂçÅÂ§©ÈîÄÂîÆÈ¢ù Ëøô‰∏™ÊåáÊ†á‰Ωé‰∫é10000Ê≥∞Èì¢ ÊòØ‰∏Ä‰∏™‰∏çÂ§™ÁêÜÊÉ≥ÁöÑÂÄº„ÄÇÈ¢ÑËÆ°ÂèëÂ∏ÉÁéá‰Ωé‰∫é85%ÔºåËØ¥ÊòéÂ≠òÂú®Â±•Á∫¶‰∏çË∂≥ÔºåÊúâËæÉÂ§öÂêà‰ΩúËøùÁ∫¶ÂèëÁîüÁöÑÊÉÖÂÜµ**
    6.  **Ëã•Êüê‰ΩçËææ‰∫∫Â≠òÂú®3Êù°‰ª•‰∏äÁöÑËßÜÈ¢ëÊèêÂà∞Âêå‰∏ÄÊ¨æ‰∫ßÂìÅÔºåËØ¥ÊòéËøô‰∏™Ëææ‰∫∫Âú®ÂíåÂìÅÁâåÊñπËøõË°åÂêà‰ΩúÊó∂Ôºå‰ºöÂÄæÂêë‰∫éÂ§öÂèëËßÜÈ¢ëÔºåËøôÊòØ‰∏Ä‰∏™È´òÂäøËÉΩÁöÑÊåáÊ†á**
    7.  **Êàë‰ª¨ÂΩìÂâçÂìÅÁâåÊòØÂ§Ñ‰∫éÁæéÂ¶Ü‰∏™Êä§Á±ªÁõÆ‰∏ãÔºåÊâÄ‰ª•Ëã•Ëææ‰∫∫Â≠òÂú®ÁæéÂ¶Ü‰∏™Êä§Á±ªÁöÑÁõ∏ÂÖ≥ËßÜÈ¢ëÔºåËØ∑‰Ω†ÈáçÁÇπÂàÜÊûê„ÄÇ**
    8.  **Êèê‰æõÁöÑÂïÜ‰∏öÊï∞ÊçÆ‰∏≠ÁöÑËßÜÈ¢ëÂπ≥ÂùáËßÇÁúãÈáèÊòØÊåáÂàõ‰ΩúËÄÖÊâÄÊúâÁöÑËßÜÈ¢ëÁöÑÂπ≥ÂùáËßÇÁúãÈáè(ÂåÖÊã¨ÁîµÂïÜËßÜÈ¢ëÂíåÈùûÁîµÂïÜËßÜÈ¢ë)ÔºåÂπ∂ÈùûÊòØÂíåÊàë‰ª¨ÂìÅÁâåÂêà‰ΩúÁöÑÂéÜÂè≤Êï∞ÊçÆ„ÄÇËØ∑‰Ω†‰∏çË¶ÅÂøòËÆ∞**

    ËØ∑‰Ω†Êï¥ÂêàÊâÄÊúâ‰ø°ÊÅØÔºåÂÆåÊàê‰ª•‰∏ã‰∏§‰∏™‰ªªÂä°ÔºåÂπ∂Âú®‰∏§‰∏™‰ªªÂä°ÁöÑËæìÂá∫‰πãÈó¥Ôºå‰ΩøÁî® \`---SEPARATOR---\` ‰Ωú‰∏∫ÂîØ‰∏ÄÁöÑÂàÜÈöîÁ¨¶„ÄÇ

    ---
    ### È£û‰π¶Â§öÁª¥Ë°®Ê†ºÂïÜ‰∏öÊï∞ÊçÆ
    **Âàõ‰ΩúËÄÖÂü∫Á°Ä‰ø°ÊÅØ:**
    - **Âàõ‰ΩúËÄÖHandle:** ${commercialData['Âàõ‰ΩúËÄÖ Handle'] || 'N/A'}
    - **Âàõ‰ΩúËÄÖÂêçÁß∞:** ${commercialData['Âàõ‰ΩúËÄÖÂêçÁß∞'] || 'N/A'}
    
    **Êï∞ÊçÆÊåáÊ†á:**
    - **Á≤â‰∏ùÊï∞:** ${commercialData['Á≤â‰∏ùÊï∞'] || 'N/A'}
    - **È¢ÑËÆ°ÂèëÂ∏ÉÁéá:** ${commercialData['È¢ÑËÆ°ÂèëÂ∏ÉÁéá'] || 'N/A'}
    - **Ëøë‰∏âÂçÅÂ§©ÈîÄÂîÆÈ¢ù:** ¬•${commercialData['ÈîÄÂîÆÈ¢ù'] || 'N/A'}
    - **ËßÜÈ¢ëÂπ≥ÂùáËßÇÁúãÈáè:** ${commercialData['ËßÜÈ¢ëÂπ≥ÂùáËßÇÁúãÈáè'] || 'N/A'}
    
    **‰∫ßÂìÅ‰ø°ÊÅØ:**
    - **‰∫ßÂìÅÂêçÁß∞:** ${commercialData['‰∫ßÂìÅÂêçÁß∞'] || 'N/A'}
    
    **ÂÆåÊï¥ÂïÜ‰∏öÊï∞ÊçÆJSON:**
    \`\`\`json
    ${JSON.stringify(commercialData, null, 2)}
    \`\`\`
    - **Ëøë100Êù°ËßÜÈ¢ëÂÆåÊï¥ÁªüËÆ°Êï∞ÊçÆ:** ${JSON.stringify(allVideos.map(v => ({ aweme_id: v.aweme_id, desc: v.desc, create_time: v.create_time, statistics: v.statistics, cha_list: v.cha_list, text_extra: v.text_extra })), null, 2)}
    - **Êí≠ÊîæÈáèÊúÄÈ´òÁöÑ3‰∏™ËßÜÈ¢ëÂÆåÊï¥Êï∞ÊçÆ:** ${JSON.stringify(topVideos.map(v => ({ aweme_id: v.aweme_id, desc: v.desc, create_time: v.create_time, statistics: v.statistics, cha_list: v.cha_list, text_extra: v.text_extra, author: v.author })), null, 2)}
    ---

    ### ‰ªªÂä°‰∏ÄÔºöÁîüÊàêÂàõ‰ΩúËÄÖËÉΩÂäõÊ∑±Â∫¶ÂàÜÊûêÊä•Âëä (Markdown)
    ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãÁªìÊûÑÁîüÊàê‰∏Ä‰ªΩ‰∏ì‰∏öÁöÑÂàõ‰ΩúËÄÖËÉΩÂäõÂàÜÊûêÊä•ÂëäÔºåË¶ÅÊ±ÇÂ±ÇÁ∫ßÂàÜÊòéÔºåÊ†ºÂºèËßÑËåÉÔºö

    # Âàõ‰ΩúËÄÖËÉΩÂäõ‰∏éÂïÜ‰∏öÂåñ‰ª∑ÂÄºÂàÜÊûêÊä•Âëä

    ## ‰∏Ä„ÄÅÊï∞ÊçÆÊ¶ÇËßà‰∏éÊï¥‰ΩìË°®Áé∞

    ### 1.1 Âü∫Á°Ä‰ø°ÊÅØ
    - **Âàõ‰ΩúËÄÖÂêçÁß∞:** ${commercialData['Âàõ‰ΩúËÄÖÂêçÁß∞'] || 'N/A'}
    - **Âàõ‰ΩúËÄÖHandle:** @${commercialData['Âàõ‰ΩúËÄÖ Handle'] || 'N/A'}
    - **Á≤â‰∏ùÊï∞Èáè:** ${commercialData['Á≤â‰∏ùÊï∞'] || 'N/A'}
    - **È¢ÑËÆ°ÂèëÂ∏ÉÁéá:** ${commercialData['È¢ÑËÆ°ÂèëÂ∏ÉÁéá'] || 'N/A'}
    - **ËßÜÈ¢ëÂπ≥ÂùáËßÇÁúãÈáè:** ${commercialData['ËßÜÈ¢ëÂπ≥ÂùáËßÇÁúãÈáè'] || 'N/A'}
    
    ### 1.2 ÂÜÖÂÆπÊï∞ÊçÆÁªüËÆ°
    - **ÂàÜÊûêËßÜÈ¢ëÊÄªÊï∞:** ${allVideos.length} Êù°
    - **Âπ≥ÂùáÊí≠ÊîæÈáè:** ${Math.round(allVideos.reduce((sum, v) => sum + (v.statistics.play_count || 0), 0) / allVideos.length).toLocaleString()}
    - **Âπ≥ÂùáÁÇπËµûÈáè:** ${Math.round(allVideos.reduce((sum, v) => sum + (v.statistics.digg_count || 0), 0) / allVideos.length).toLocaleString()}

    ## ‰∫å„ÄÅÂü∫‰∫éÂÖ®ÈáèÊï∞ÊçÆÁöÑÊ∑±Â∫¶ÂàÜÊûê
    (Ê≠§Â§ÑÁúÅÁï•ÈÉ®ÂàÜÊä•ÂëäÊ®°Êùø‰ª•‰øùÊåÅÁÆÄÊ¥Å)
    
    ## ÂÖ≠„ÄÅÂêà‰ΩúÂª∫ËÆÆ‰∏éÈ£éÈô©ÊèêÁ§∫
    
    ---SEPARATOR---

    ### ‰ªªÂä°‰∫åÔºöÁîüÊàêÁÆÄÊ¥ÅÂÆ°Ê†∏ÊÑèËßÅ
    ËØ∑Ê†πÊçÆÂàÜÊûêÁªìÊûúÔºåÁªôÂá∫‰ª•‰∏ãÂõõÁßçËØÑÁ∫ß‰πã‰∏ÄÔºö
    - **Âº∫ÁÉàÊé®Ëçê**
    - **ÂÄºÂæóËÄÉËôë**
    - **Âª∫ËÆÆËßÇÊúõ**
    - **‰∏çÊé®Ëçê**
    
    ËØ∑Âè™ËæìÂá∫ËØÑÁ∫ßÁªìÊûúÔºå‰∏çË¶ÅÊ∑ªÂä†ÂÖ∂‰ªñËØ¥Êòé„ÄÇ
  `;

  const videoUrls = topVideos.map(video => video.video.play_addr.url_list[0].replace('playwm', 'play')).filter(Boolean);
  console.log(`Downloading ${videoUrls.length} videos for inline analysis...`);

  const downloadPromises = videoUrls.map(async (url, index) => {
    try {
      const response = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0' }, timeout: 30000 });
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      const buffer = await response.buffer();
      if (buffer.length < 1000) {
        console.warn(`Video ${index + 1} seems too small.`);
        return null;
      }
      return buffer;
    } catch (error) {
      console.error(`Failed to download video ${index + 1} from ${url}:`, error.message);
      return null;
    }
  });

  const videoBuffers = (await Promise.all(downloadPromises)).filter(Boolean);
  console.log(`Successfully downloaded ${videoBuffers.length}/${videoUrls.length} videos.`);

  const videoParts = videoBuffers.map(buffer => ({
    inlineData: {
      data: buffer.toString('base64'),
      mimeType: 'video/mp4',
    },
  }));

  const model = ai.getGenerativeModel({ model: 'gemini-1.5-flash' });
  const contents = [{ parts: [{ text: prompt }] }];
  if (videoParts.length > 0) {
    contents[0].parts.push(...videoParts);
    console.log(`Calling Gemini with ${videoParts.length} inline videos.`);
  } else {
    console.warn("Calling Gemini with text prompt only, as no videos were downloaded.");
  }

  const result = await model.generateContent({ contents });
  const response = result.response;
  
  if (!response) {
      console.error('‚ùå Gemini API did not return a valid response object.');
      throw new Error('Invalid response from Gemini API');
  }

  const responseText = response.text();

  console.log(`Gemini response received. Length: ${responseText.length}`);
  const responseParts = responseText.split('---SEPARATOR---');

  if (responseParts.length < 2) {
    console.error('AI response split failed.');
    throw new Error('AI response split failed');
  }

  const reportMarkdown = responseParts[0].trim();
  const reviewOpinion = responseParts[1].replace(/^###\s*‰ªªÂä°‰∫åÔºöÁîüÊàêÁÆÄÊ¥ÅÂÆ°Ê†∏ÊÑèËßÅ\s*/i, '').trim();

  return { reportMarkdown, reviewOpinion };
}

async function performCompleteFeishuOperations(feishuRecordId, reviewOpinion, reportMarkdown, creatorHandle, env, accessToken, commercialData) {
  console.log('Starting complete Feishu operations (text-only mode)...');
  
  const creatorName = commercialData['Âàõ‰ΩúËÄÖÂêçÁß∞'];
  const allRecordIds = await searchRecordsByCreatorName(creatorName, env, accessToken);
  
  console.log(`Found ${allRecordIds.length} records for creator: ${creatorName}`);
  
  if (allRecordIds.length > 0) {
    await updateMultipleFeishuRecords(allRecordIds, reviewOpinion, reportMarkdown, env, accessToken);
  } else {
    await updateFeishuRecordWithText(feishuRecordId, reviewOpinion, reportMarkdown, env, accessToken);
  }
  
  console.log('Complete Feishu operations finished successfully');
}

async function getTiktokData(uniqueId) {
  const MAX_VIDEOS = 100;
  const BATCH_SIZE = 50;
  let allVideos = [];
  let hasMore = true;
  let maxCursor = null;
  let requestCount = 0;
  const MAX_REQUESTS = 10;

  console.log(`Fetching videos for ${uniqueId}, max: ${MAX_VIDEOS}`);

  while (hasMore && allVideos.length < MAX_VIDEOS && requestCount < MAX_REQUESTS) {
    requestCount++;
    const url = new URL('https://tiktok-user-posts.1170731839.workers.dev/');
    url.searchParams.set('unique_id', uniqueId);
    url.searchParams.set('count', BATCH_SIZE.toString());
    if (maxCursor) {
      url.searchParams.set('max_cursor', maxCursor);
    }

    try {
      const response = await fetch(url.toString(), { timeout: 30000 });
      if (!response.ok) {
        console.error(`TikTok service error: ${response.status}`);
        break;
      }
      const data = await response.json();
      const awemeList = data.data?.aweme_list || data.aweme_list || [];
      
      if (awemeList.length === 0) {
        break;
      }
      
      allVideos = allVideos.concat(awemeList);
      hasMore = (data.data?.has_more || data.has_more) === 1;
      maxCursor = data.data?.max_cursor || data.max_cursor;

    } catch (error) {
      console.error(`TikTok fetch failed:`, error);
      break;
    }
  }

  console.log(`Total videos fetched: ${allVideos.length}`);
  const sortedVideos = allVideos.sort((a, b) => (b.statistics.play_count || 0) - (a.statistics.play_count || 0));
  const topVideos = sortedVideos.slice(0, 3);
  
  return { allVideos, topVideos };
}

async function searchRecordsByCreatorName(creatorName, env, accessToken) {
  const searchUrl = `https://open.feishu.cn/open-apis/bitable/v1/apps/${env.FEISHU_APP_TOKEN}/tables/${env.FEISHU_TABLE_ID}/records/search`;
  const searchPayload = {
    filter: {
      conjunction: 'and',
      conditions: [{
        field_name: 'Âàõ‰ΩúËÄÖÂêçÁß∞',
        operator: 'is',
        value: [String(creatorName)]
      }]
    },
    page_size: 100
  };

  const response = await fetch(searchUrl, {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${accessToken}`, 'Content-Type': 'application/json; charset=utf-8' },
    body: JSON.stringify(searchPayload)
  });

  const result = await response.json();
  if (result.code !== 0) {
    throw new Error(`Feishu search error: ${result.msg}`);
  }
  return result.data?.items?.map(item => item.record_id) || [];
}

async function updateFeishuRecordWithText(recordId, reviewOpinion, reportMarkdown, env, accessToken) {
    const updateUrl = `https://open.feishu.cn/open-apis/bitable/v1/apps/${env.FEISHU_APP_TOKEN}/tables/${env.FEISHU_TABLE_ID}/records/${recordId}`;
    const updateData = {
        fields: {
            'ÂÆ°Ê†∏ÊÑèËßÅ': reviewOpinion,
            'GeminiÂàÜÊûêÂÜÖÂÆπ': reportMarkdown
        }
    };
    const response = await fetch(updateUrl, {
        method: 'PUT',
        headers: { 'Authorization': `Bearer ${accessToken}`, 'Content-Type': 'application/json; charset=utf-8' },
        body: JSON.stringify(updateData)
    });
    const result = await response.json();
    if (result.code !== 0) {
        throw new Error(`Feishu update error: ${result.msg}`);
    }
    console.log(`Successfully updated record ${recordId}`);
}

async function updateMultipleFeishuRecords(recordIds, reviewOpinion, reportMarkdown, env, accessToken) {
  if (recordIds.length === 0) return;
  const updateUrl = `https://open.feishu.cn/open-apis/bitable/v1/apps/${env.FEISHU_APP_TOKEN}/tables/${env.FEISHU_TABLE_ID}/records/batch_update`;
  const updateData = {
    records: recordIds.map(recordId => ({
      record_id: recordId,
      fields: {
        'ÊòØÂê¶Â∑≤ÁªèÂèëËµ∑ÂàÜÊûêËØ∑Ê±Ç': 'ÊòØ',
        'ÂÆ°Ê†∏ÊÑèËßÅ': reviewOpinion,
        'GeminiÂàÜÊûêÂÜÖÂÆπ': reportMarkdown
      }
    }))
  };

  const response = await fetch(updateUrl, {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${accessToken}`, 'Content-Type': 'application/json; charset=utf-8' },
    body: JSON.stringify(updateData)
  });
  
  const result = await response.json();
  if (result.code !== 0) {
    throw new Error(`Feishu batch update error: ${result.msg}`);
  }
  console.log(`Successfully updated ${recordIds.length} records.`);
}
